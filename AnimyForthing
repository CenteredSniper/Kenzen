
-- ProductionTakeOne#3330 //

-- AnimY [Remastered AnimX] // 

-- Loading\Services //

local tween_service = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")
local run_service = game:GetService("RunService")
local player = game:GetService("Players").LocalPlayer
_G.dancing = false
_G.AnimationSpeed = 1
local dancingplay,can_collide,cframetoggle = false,true,false
local play_the_animation, joints, anims, connections, character, dragToggle, dragInput, dragStart, selected, sound, boombox

-- Functions //

if not run_service:FindFirstChild('Delta') then
		local Delta = Instance.new('BindableEvent',run_service); Delta['Name'] = 'Delta'
		local A, B = 0, tick()
		run_service.Delta:Fire(); run_service.Heartbeat:Connect(function(C, D)
			A = A + C
			if A >= (1/60) then
				for I = 1, math.floor(A / (1/60)) do
					run_service.Delta:Fire()
				end
				B = tick()
				A = A - (1/60) * math.floor(A / (1/60))
			end
		end)
	end

--[[
_G.runanimation = function(button)
	if play_the_animation ~= nil then
		selected = button.Name
		local theidslol = button.Name:split(" ")
		play_the_animation(theidslol[1],theidslol[2])
	else
		if printconsole then printconsole("Please use /load!"); else warn("Please use /load!") end
		wait(0.1)
		game.StarterGui:SetCore("ChatMakeSystemMessage",{Text = "{AnimY}: Please use /load or /e load!"})
	end
end]]

local Create = function(Obj,Parent)
	local I = Instance.new(Obj); I['Parent'] = Parent; return I
end

local Contains = function(Table,KV)
	for K,V in next, Table do 
		if rawequal(KV,K) or rawequal(KV,V) then 
			return true;
		end
	end
	return false
end

local checkstyle = function(dastyle)
	local test,test2 = pcall(function() local testvar = Enum['EasingStyle'][tostring(dastyle):split('.')[3]] end)
	return test
end

local Edit = function(Part,Value,Duration,Style,Direction)
	if not checkstyle(Style) then cframetoggle = true else cframetoggle = false end
	Style = Style or 'Enum.EasingStyle.Linear'; Direction = Direction or 'Enum.EasingDirection.In'
	local Attachment = Part--:FindFirstChild('CFAttachment0')
	if Attachment ~= nil then
		Attachment = joints[Part.Name]
		--Attachment.Transform = Value
		if cframetoggle then
			Attachment.Transform = Value
		else
			tween_service:Create(Attachment,TweenInfo.new(Duration,Enum['EasingStyle'][tostring(Style):split('.')[3]],Enum['EasingDirection'][tostring(Direction):split('.')[3]],0,false,0),{Transform = Value}):Play()
		end

		--if cframetoggle then
		--	Attachment.CFrame = Value
		--else
		--tween_service:Create(Attachment,TweenInfo.new(Duration,Enum['EasingStyle'][tostring(Style):split('.')[3]],Enum['EasingDirection'][tostring(Direction):split('.')[3]],0,false,0),{CFrame = Value}):Play()
		--end

	end
end

local PoseToCF = function(Pose,Motor)
	return (Motor['Part0'].CFrame * Motor['C0'] * Pose['CFrame'] * Motor['C1']:Inverse()):ToObjectSpace(Motor['Part0'].CFrame)
end


local PreloadAnimation = function(AssetId)
	local Sequence = game:GetObjects('rbxassetid://'..tostring(AssetId))[1]; assert(Sequence:IsA('KeyframeSequence'),'Instance is not a KeyframeSequence.')
	repeat task.wait() until Sequence
	local Class = {}
	--Class['Speed'] = animspeed
	local Keyframes = Sequence:GetKeyframes()
	local Yield = function(Seconds)
		local Time = Seconds * (60.8) --+ Keyframes[#Keyframes].Time)
		if (1/Time) > 1 then Time = 1 end
		for I = 1,Time,_G.AnimationSpeed do 
			run_service.Delta['Event']:Wait()
			--task.wait(1/60.8)
		end
	end
	Class['Stopped'] = false;
	Class['Complete'] = Instance.new('BindableEvent')
	Class['Play'] = function()
		Class['Stopped'] = false
		if boombox and _G.dancing then
			repeat task.wait() until boombox.Handle.Sound.Playing and boombox.Handle.Sound.TimeLength ~= 0
		elseif sound and _G.dancing then
			--print(sound) print(sound.SoundId)
			repeat task.wait() until sound.Playing
		end
		coroutine.wrap(function()
			repeat
				for K = 1,#Keyframes do 
					local K0, K1, K2 = Keyframes[K-1], Keyframes[K], Keyframes[K+1]
					if Class['Stopped'] ~= true and player.Character.Humanoid.Health > 0 then
						if K0 ~= nil then 
							Yield(K1['Time'] - K0['Time'])
						end
						coroutine.wrap(function()
							for I = 1,#K1:GetDescendants() do 
								local Pose = K1:GetDescendants()[I]
								if Contains(joints,Pose['Name']) and player.Character:FindFirstChild(Pose['Name']) then 
									local Duration = K2 ~= nil and (K2['Time'] - K1['Time'])/_G.AnimationSpeed or .5
									--Edit(player.Character[Pose['Name']],PoseToCF(Pose,joints[Pose['Name']]),Duration,Pose['EasingStyle'],Pose['EasingDirection'])
									Edit(player.Character[Pose['Name']],Pose.CFrame,Duration,Pose['EasingStyle'],Pose['EasingDirection'])
								end
							end
						end)()
					end
				end
				Class['Complete']:Fire()
			until Sequence['Loop'] ~= true or Class['Stopped'] ~= false or player.Character.Humanoid.Health < 1
		end)()
	end
	Class['Stop'] = function()
		Class['Stopped'] = true;
	end
	Class['Reset'] = function()
		coroutine.wrap(function()
			wait(.02)
			assert(Class['Stopped'],'Track Must Be Stopped First!')
			for K,V in next, joints do 
				local Part = Char[K]
				if Part ~= nil then 
					local Attachment = Part:FindFirstChild('CFAttachment0')
					if Attachment ~= nil then 
						Attachment['CFrame'] = V['C1'] * V['C0']:Inverse()
					end
				end
			end
		end)()
	end
	return Class
end

local StopAll = function()
	for K,V in next, anims do 
		if V['Stopped'] ~= true then 
			V:Stop()
		end
	end
end

local function fakeheadfun()
	local head = game.Players.LocalPlayer.Character.Head
	local a = head:Clone(); a.Name = "Head"; head.Name = "FakeHead"; a.Parent = game.Players.LocalPlayer.Character; a.CanCollide = false
	local b = game.Players.LocalPlayer.Character.Torso.Neck:Clone(); b.Name = "FakeNeck"; b.Part1 = a; b.Parent = game.Players.LocalPlayer.Character.Torso
	head.Transparency = 1; head.face:Destroy()
	for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do if v:IsA("Accessory") then if v.Handle.AccessoryWeld.Part1 == head then v.Handle.AccessoryWeld.Part1 = a end end end
end

local function AnimationLoader()
	boombox = game:GetService("Players").LocalPlayer.Character:FindFirstChild("Remote",true)
	if boombox then
		repeat 
			boombox = boombox.Parent
			--task.wait()
		until boombox:IsA("Tool")
		game:GetService("Players").LocalPlayer.Character:FindFirstChild("RightGrip",true):Destroy()
	end
	local deltt = 0
	local renderstp  = game:GetService("RunService").Heartbeat:Connect(function(delta)
		deltt = deltt + delta
		if boombox then
			if boombox.Handle.CanCollide then boombox.Handle.CanCollide = false end
			boombox.Handle.CFrame = player.Character:WaitForChild("Torso").CFrame*CFrame.new(Vector3.new(0,0,1))*CFrame.Angles(0,math.rad(180),math.rad(45))
		end
	end)
	character = player['Character']
	local torso, root, humanoid = character['Torso'], character['HumanoidRootPart'], character['Humanoid']
	joints = {
		['Torso'] = root['RootJoint'];
		['Left Arm'] = torso['Left Shoulder'];
		['Right Arm'] = torso['Right Shoulder'];
		['Left Leg'] = torso['Left Hip'];
		['Right Leg'] = torso['Right Hip'];
		['Head'] = torso['Neck']
	}
	root['Anchored'] = true;
	--[[
	coroutine.wrap(function()
		root['Anchored'] = true;
		wait(.8)
		root['Anchored'] = false;
	end)()]]
	--[[
	for K,V in next, joints do 
		local AP, AO, A0, A1 = Create('AlignPosition',V['Part1']), Create('AlignOrientation',V['Part1']), Create('Attachment',V['Part1']), Create('Attachment',V['Part0'])
		AP['RigidityEnabled'] = true; AO['RigidityEnabled'] = true; AP['Attachment0'] = A0; AP['Attachment1'] = A1; AO['Attachment0'] = A0; AO['Attachment1'] = A1;
		A0['Name'] = 'CFAttachment0'; A1['Name'] = 'CFAttachment1'; A0['CFrame'] = V['C1'] * V['C0']:Inverse(); V.Parent = nil --V:Remove()
	end
	]]
	character.Animate.Disabled = true

	-- Stop all playing animations
	for i, track in pairs (humanoid:GetPlayingAnimationTracks()) do
		track:Stop()
	end
	local randomidle = {180435571,7840378308}
	randomidle = randomidle[math.random(1,2)]
	anims = {
		['Idle'] = PreloadAnimation(randomidle,true,character); --5183986020
		['Walk'] = PreloadAnimation(6606119539,true,character);  --5053650512,180426354
		['Run'] = PreloadAnimation(180426354,true,character); --5053715968
		['Jump'] = PreloadAnimation(125750702,true,character); --4073859368
		['Fall'] = PreloadAnimation(180436148,true,character); --3323393688
	}

	--wait(1)
	task.wait()
	connections = {};
	anims['Idle']:Play(); _G.dancing = false; anims['Walk'].Stopped = true; anims['Run'].Stopped = true

	connections['Run'] = humanoid['Running']:Connect(function(Speed)
		if Speed > 6 and _G.dancing ~= true and anims['Walk'].Stopped ~= false then
			anims['Idle']:Stop()
			anims['Jump']:Stop()
			anims['Fall']:Stop()
			anims['Run']:Stop()
			anims['Walk']:Play()
		elseif Speed < 5 and _G.dancing ~= true and anims['Walk'].Stopped ~= true then
			anims['Walk']:Stop()
			anims['Jump']:Stop()
			anims['Fall']:Stop()
			anims['Run']:Stop()
			anims['Idle']:Play()
		elseif Speed < 5 and _G.dancing ~= true and anims['Jump'].Stopped ~= true or anims['Fall'].Stopped ~= true then
			anims['Walk']:Stop()
			anims['Jump']:Stop()
			anims['Fall']:Stop()
			anims['Run']:Stop()
			anims['Idle']:Play()
		end
	end)

	connections['Jumping'] = humanoid['Jumping']:Connect(function(active)
		if active and _G.dancing ~= true and anims['Jump'].Stopped ~= false then
			anims['Idle']:Stop()
			anims['Walk']:Stop()
			anims['Fall']:Stop()
			anims['Run']:Stop()
			anims['Jump']:Play()
		end
	end)
	connections['FreeFalling'] = humanoid['FreeFalling']:Connect(function(active)
		if active and _G.dancing ~= true and anims['Jump'].Stopped ~= false then
			anims['Idle']:Stop()
			anims['Walk']:Stop()
			anims['Jump']:Stop()
			anims['Run']:Stop()
			anims['Fall']:Play()
		end
	end)
	root['Anchored'] = false;
	wait(0.5)
	_G.runanimation = function(animationid,soundid)
		if boombox == nil and soundid then
			if sound then sound:Destroy() sound = nil end
			sound = Instance.new("Sound",root)
			sound.SoundId = "rbxassetid://" .. soundid
			sound.Volume = 1; sound.RollOffMaxDistance = 100; sound.Looped = true
		end
		local Animation = PreloadAnimation(animationid,character)
		if _G.dancing then _G.dancing = false end
		repeat task.wait() until dancingplay == false
		wait(0.1) 
		StopAll(); wait(.1); Animation:Play() Animation['Speed'] = 1
		_G.dancing = true
		--warn(boombox)
		if boombox == nil and sound then
			sound:Play()
		else
			character[game.Players.LocalPlayer.Name]:FindFirstChild("Remote",true):FireServer("PlaySong", soundid)
		end
		repeat task.wait() until _G.dancing == false Animation:Stop()
		dancingplay = false
	end
	humanoid.Died:Wait()
	if sound then sound:Destroy() end
	if boombox then boombox = nil end
	if _G.runanimation then _G.runanimation = nil end
	if renderstp then renderstp:Disconnect() end
end

--task.wait()
coroutine.wrap(AnimationLoader)()
